{"ast":null,"code":"var _jsxFileName = \"/home/abhik/Desktop/RedcusX/src/CusX/sox/src/pages/Classify.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Alert, Button, Collapse, Container, Form, Spinner, ListGroup, Tabs, Tab } from 'react-bootstrap';\nimport { FaCamera, FaChevronDown, FaChevronRight } from 'react-icons/fa';\nimport { openDB } from 'idb';\nimport Cropper from 'react-cropper';\nimport * as tf from '@tensorflow/tfjs';\nimport LoadButton from '../components/LoadButton';\nimport { MODEL_CLASSES } from '../model/classes';\nimport config from '../config';\nimport './Classify.css';\nimport 'cropperjs/dist/cropper.css';\nconst MODEL_PATH = '/model/model.json';\nconst IMAGE_SIZE = 224;\nconst CANVAS_SIZE = 224;\nconst TOPK_PREDICTIONS = 5;\nconst INDEXEDDB_DB = 'tensorflowjs';\nconst INDEXEDDB_STORE = 'model_info_store';\nconst INDEXEDDB_KEY = 'web-model';\n/**\n * Class to handle the rendering of the Classify page.\n * @extends React.Component\n */\n\nexport default class Classify extends Component {\n  constructor(props) {\n    super(props);\n\n    this.initWebcam = async () => {\n      try {\n        this.webcam = await tf.data.webcam(this.refs.webcam, {\n          resizeWidth: CANVAS_SIZE,\n          resizeHeight: CANVAS_SIZE,\n          facingMode: 'environment'\n        });\n      } catch (e) {\n        this.refs.noWebcam.style.display = 'block';\n      }\n    };\n\n    this.startWebcam = async () => {\n      if (this.webcam) {\n        this.webcam.start();\n      }\n    };\n\n    this.stopWebcam = async () => {\n      if (this.webcam) {\n        this.webcam.stop();\n      }\n    };\n\n    this.getModelInfo = async () => {\n      await fetch(\"\".concat(config.API_ENDPOINT, \"/model_info\"), {\n        method: 'GET'\n      }).then(async response => {\n        await response.json().then(data => {\n          this.modelLastUpdated = data.last_updated;\n        }).catch(err => {\n          console.log('Unable to get parse model info.');\n        });\n      }).catch(err => {\n        console.log('Unable to get model info');\n      });\n    };\n\n    this.updateModel = async () => {\n      // Get the latest model from the server and refresh the one saved in IndexedDB.\n      console.log('Updating the model: ' + INDEXEDDB_KEY);\n      this.setState({\n        isDownloadingModel: true\n      });\n      this.model = await tf.loadLayersModel(MODEL_PATH);\n      await this.model.save('indexeddb://' + INDEXEDDB_KEY);\n      this.setState({\n        isDownloadingModel: false,\n        modelUpdateAvailable: false,\n        showModelUpdateAlert: false,\n        showModelUpdateSuccess: true\n      });\n    };\n\n    this.classifyLocalImage = async () => {\n      this.setState({\n        isClassifying: true\n      });\n      const croppedCanvas = this.refs.cropper.getCroppedCanvas();\n      const image = tf.tidy(() => tf.browser.fromPixels(croppedCanvas).toFloat()); // Process and resize image before passing in to model.\n\n      const imageData = await this.processImage(image);\n      const resizedImage = tf.image.resizeBilinear(imageData, [IMAGE_SIZE, IMAGE_SIZE]);\n      const logits = this.model.predict(resizedImage);\n      const probabilities = await logits.data();\n      const preds = await this.getTopKClasses(probabilities, TOPK_PREDICTIONS);\n      this.setState({\n        predictions: preds,\n        isClassifying: false,\n        photoSettingsOpen: !this.state.photoSettingsOpen\n      }); // Draw thumbnail to UI.\n\n      const context = this.refs.canvas.getContext('2d');\n      const ratioX = CANVAS_SIZE / croppedCanvas.width;\n      const ratioY = CANVAS_SIZE / croppedCanvas.height;\n      const ratio = Math.min(ratioX, ratioY);\n      context.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n      context.drawImage(croppedCanvas, 0, 0, croppedCanvas.width * ratio, croppedCanvas.height * ratio); // Dispose of tensors we are finished with.\n\n      image.dispose();\n      imageData.dispose();\n      resizedImage.dispose();\n      logits.dispose();\n    };\n\n    this.classifyWebcamImage = async () => {\n      this.setState({\n        isClassifying: true\n      });\n      const imageCapture = await this.webcam.capture();\n      const resized = tf.image.resizeBilinear(imageCapture, [IMAGE_SIZE, IMAGE_SIZE]);\n      const imageData = await this.processImage(resized);\n      const logits = this.model.predict(imageData);\n      const probabilities = await logits.data();\n      const preds = await this.getTopKClasses(probabilities, TOPK_PREDICTIONS);\n      this.setState({\n        predictions: preds,\n        isClassifying: false,\n        photoSettingsOpen: !this.state.photoSettingsOpen\n      }); // Draw thumbnail to UI.\n\n      const tensorData = tf.tidy(() => imageCapture.toFloat().div(255));\n      await tf.browser.toPixels(tensorData, this.refs.canvas); // Dispose of tensors we are finished with.\n\n      resized.dispose();\n      imageCapture.dispose();\n      imageData.dispose();\n      logits.dispose();\n      tensorData.dispose();\n    };\n\n    this.processImage = async image => {\n      return tf.tidy(() => image.expandDims(0).toFloat().div(127).sub(1));\n    };\n\n    this.getTopKClasses = async (values, topK) => {\n      const valuesAndIndices = [];\n\n      for (let i = 0; i < values.length; i++) {\n        valuesAndIndices.push({\n          value: values[i],\n          index: i\n        });\n      }\n\n      valuesAndIndices.sort((a, b) => {\n        return b.value - a.value;\n      });\n      const topkValues = new Float32Array(topK);\n      const topkIndices = new Int32Array(topK);\n\n      for (let i = 0; i < topK; i++) {\n        topkValues[i] = valuesAndIndices[i].value;\n        topkIndices[i] = valuesAndIndices[i].index;\n      }\n\n      const topClassesAndProbs = [];\n\n      for (let i = 0; i < topkIndices.length; i++) {\n        topClassesAndProbs.push({\n          className: MODEL_CLASSES[topkIndices[i]],\n          probability: (topkValues[i] * 100).toFixed(2)\n        });\n      }\n\n      return topClassesAndProbs;\n    };\n\n    this.handlePanelClick = event => {\n      this.setState({\n        photoSettingsOpen: !this.state.photoSettingsOpen\n      });\n    };\n\n    this.handleFileChange = event => {\n      if (event.target.files && event.target.files.length > 0) {\n        this.setState({\n          file: URL.createObjectURL(event.target.files[0]),\n          filename: event.target.files[0].name\n        });\n      }\n    };\n\n    this.handleTabSelect = activeKey => {\n      switch (activeKey) {\n        case 'camera':\n          this.startWebcam();\n          break;\n\n        case 'localfile':\n          this.setState({\n            filename: null,\n            file: null\n          });\n          this.stopWebcam();\n          break;\n\n        default:\n      }\n    };\n\n    this.webcam = null;\n    this.model = null;\n    this.modelLastUpdated = null;\n    this.state = {\n      modelLoaded: false,\n      filename: '',\n      isModelLoading: false,\n      isClassifying: false,\n      predictions: [],\n      photoSettingsOpen: true,\n      modelUpdateAvailable: false,\n      showModelUpdateAlert: false,\n      showModelUpdateSuccess: false,\n      isDownloadingModel: false\n    };\n  }\n\n  async componentDidMount() {\n    if ('indexedDB' in window) {\n      try {\n        this.model = await tf.loadLayersModel('indexeddb://' + INDEXEDDB_KEY); // Safe to assume tensorflowjs database and related object store exists.\n        // Get the date when the model was saved.\n\n        try {\n          const db = await openDB(INDEXEDDB_DB, 1);\n          const item = await db.transaction(INDEXEDDB_STORE).objectStore(INDEXEDDB_STORE).get(INDEXEDDB_KEY);\n          const dateSaved = new Date(item.modelArtifactsInfo.dateSaved);\n          await this.getModelInfo();\n          console.log(this.modelLastUpdated);\n\n          if (!this.modelLastUpdated || dateSaved >= new Date(this.modelLastUpdated).getTime()) {\n            console.log('Using saved model');\n          } else {\n            this.setState({\n              modelUpdateAvailable: true,\n              showModelUpdateAlert: true\n            });\n          }\n        } catch (error) {\n          console.warn(error);\n          console.warn('Could not retrieve when model was saved.');\n        }\n      } // If error here, assume that the object store doesn't exist and the model currently isn't\n      // saved in IndexedDB.\n      catch (error) {\n        console.log('Not found in IndexedDB. Loading and saving...');\n        console.log(error);\n        this.model = await tf.loadLayersModel(MODEL_PATH);\n        await this.model.save('indexeddb://' + INDEXEDDB_KEY);\n      }\n    } // If no IndexedDB, then just download like normal.\n    else {\n        console.warn('IndexedDB not supported.');\n        this.model = await tf.loadLayersModel(MODEL_PATH);\n      }\n\n    this.setState({\n      modelLoaded: true\n    });\n    this.initWebcam(); // Warm up model.\n\n    let prediction = tf.tidy(() => this.model.predict(tf.zeros([1, IMAGE_SIZE, IMAGE_SIZE, 3])));\n    prediction.dispose();\n  }\n\n  async componentWillUnmount() {\n    if (this.webcam) {\n      this.webcam.stop();\n    } // Attempt to dispose of the model.\n\n\n    try {\n      this.model.dispose();\n    } catch (e) {// Assume model is not loaded or already disposed.\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Classify container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, !this.state.modelLoaded && React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"Loading...\")), ' ', React.createElement(\"span\", {\n      className: \"loading-model-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"Loading Model\")), this.state.modelLoaded && React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handlePanelClick,\n      className: \"classify-panel-header\",\n      \"aria-controls\": \"photo-selection-pane\",\n      \"aria-expanded\": this.state.photoSettingsOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, \"Take or Select a Photo to Classify\", React.createElement(\"span\", {\n      className: \"panel-arrow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, this.state.photoSettingsOpen ? React.createElement(FaChevronDown, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }) : React.createElement(FaChevronRight, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }))), React.createElement(Collapse, {\n      in: this.state.photoSettingsOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"photo-selection-pane\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, this.state.modelUpdateAvailable && this.state.showModelUpdateAlert && React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      variant: \"info\",\n      show: this.state.modelUpdateAvailable && this.state.showModelUpdateAlert,\n      onClose: () => this.setState({\n        showModelUpdateAlert: false\n      }),\n      dismissible: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, \"An update for the \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, this.state.modelType), \" model is available.\", React.createElement(\"div\", {\n      className: \"d-flex justify-content-center pt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, !this.state.isDownloadingModel && React.createElement(Button, {\n      onClick: this.updateModel,\n      variant: \"outline-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \"Update\"), this.state.isDownloadingModel && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, React.createElement(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      size: \"sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, \"Downloading...\")), ' ', React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, \"Downloading...\"))))), this.state.showModelUpdateSuccess && React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      variant: \"success\",\n      onClose: () => this.setState({\n        showModelUpdateSuccess: false\n      }),\n      dismissible: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, \"The \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, this.state.modelType), \" model has been updated!\")), React.createElement(Tabs, {\n      defaultActiveKey: \"camera\",\n      id: \"input-options\",\n      onSelect: this.handleTabSelect,\n      className: \"justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"camera\",\n      title: \"Take Photo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"no-webcam\",\n      ref: \"noWebcam\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"camera-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(FaCamera, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    })), \"No camera found. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }), \"Please use a device with a camera, or upload an image instead.\"), React.createElement(\"div\", {\n      className: \"webcam-box-outer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"webcam-box-inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      ref: \"webcam\",\n      autoPlay: true,\n      playsInline: true,\n      muted: true,\n      id: \"webcam\",\n      width: \"448\",\n      height: \"448\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(LoadButton, {\n      variant: \"primary\",\n      size: \"lg\",\n      onClick: this.classifyWebcamImage,\n      isLoading: this.state.isClassifying,\n      text: \"Classify\",\n      loadingText: \"Classifying...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }))), React.createElement(Tab, {\n      eventKey: \"localfile\",\n      title: \"Select Local File\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      controlId: \"file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, \"Select Image File\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), React.createElement(Form.Label, {\n      className: \"imagelabel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, this.state.filename ? this.state.filename : 'Browse...'), React.createElement(Form.Control, {\n      onChange: this.handleFileChange,\n      type: \"file\",\n      accept: \"image/*\",\n      className: \"imagefile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    })), this.state.file && React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"local-image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, React.createElement(Cropper, {\n      ref: \"cropper\",\n      src: this.state.file,\n      style: {\n        height: 400,\n        width: '100%'\n      },\n      guides: true,\n      aspectRatio: 1 / 1,\n      viewMode: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, React.createElement(LoadButton, {\n      variant: \"primary\",\n      size: \"lg\",\n      disabled: !this.state.filename,\n      onClick: this.classifyLocalImage,\n      isLoading: this.state.isClassifying,\n      text: \"Classify\",\n      loadingText: \"Classifying...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }))))))), this.state.predictions.length > 0 && React.createElement(\"div\", {\n      className: \"classification-results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, \"Predictions\"), React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      width: CANVAS_SIZE,\n      height: CANVAS_SIZE,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }), React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, this.state.predictions.map(category => {\n      return React.createElement(ListGroup.Item, {\n        key: category.className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445\n        },\n        __self: this\n      }, category.className), \" \", category.probability, \"%\");\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/home/abhik/Desktop/RedcusX/src/CusX/sox/src/pages/Classify.js"],"names":["React","Component","Fragment","Alert","Button","Collapse","Container","Form","Spinner","ListGroup","Tabs","Tab","FaCamera","FaChevronDown","FaChevronRight","openDB","Cropper","tf","LoadButton","MODEL_CLASSES","config","MODEL_PATH","IMAGE_SIZE","CANVAS_SIZE","TOPK_PREDICTIONS","INDEXEDDB_DB","INDEXEDDB_STORE","INDEXEDDB_KEY","Classify","constructor","props","initWebcam","webcam","data","refs","resizeWidth","resizeHeight","facingMode","e","noWebcam","style","display","startWebcam","start","stopWebcam","stop","getModelInfo","fetch","API_ENDPOINT","method","then","response","json","modelLastUpdated","last_updated","catch","err","console","log","updateModel","setState","isDownloadingModel","model","loadLayersModel","save","modelUpdateAvailable","showModelUpdateAlert","showModelUpdateSuccess","classifyLocalImage","isClassifying","croppedCanvas","cropper","getCroppedCanvas","image","tidy","browser","fromPixels","toFloat","imageData","processImage","resizedImage","resizeBilinear","logits","predict","probabilities","preds","getTopKClasses","predictions","photoSettingsOpen","state","context","canvas","getContext","ratioX","width","ratioY","height","ratio","Math","min","clearRect","drawImage","dispose","classifyWebcamImage","imageCapture","capture","resized","tensorData","div","toPixels","expandDims","sub","values","topK","valuesAndIndices","i","length","push","value","index","sort","a","b","topkValues","Float32Array","topkIndices","Int32Array","topClassesAndProbs","className","probability","toFixed","handlePanelClick","event","handleFileChange","target","files","file","URL","createObjectURL","filename","name","handleTabSelect","activeKey","modelLoaded","isModelLoading","componentDidMount","window","db","item","transaction","objectStore","get","dateSaved","Date","modelArtifactsInfo","getTime","error","warn","prediction","zeros","componentWillUnmount","render","modelType","map","category"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport {\n  Alert, Button, Collapse, Container, Form, Spinner, ListGroup, Tabs, Tab\n} from 'react-bootstrap';\nimport { FaCamera, FaChevronDown, FaChevronRight } from 'react-icons/fa';\nimport { openDB } from 'idb';\nimport Cropper  from 'react-cropper';\nimport * as tf from '@tensorflow/tfjs';\nimport LoadButton from '../components/LoadButton';\nimport { MODEL_CLASSES } from '../model/classes';\nimport config from '../config';\nimport './Classify.css';\nimport 'cropperjs/dist/cropper.css';\n\n\nconst MODEL_PATH = '/model/model.json';\nconst IMAGE_SIZE = 224;\nconst CANVAS_SIZE = 224;\nconst TOPK_PREDICTIONS = 5;\n\nconst INDEXEDDB_DB = 'tensorflowjs';\nconst INDEXEDDB_STORE = 'model_info_store';\nconst INDEXEDDB_KEY = 'web-model';\n\n/**\n * Class to handle the rendering of the Classify page.\n * @extends React.Component\n */\nexport default class Classify extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.webcam = null;\n    this.model = null;\n    this.modelLastUpdated = null;\n\n    this.state = {\n      modelLoaded: false,\n      filename: '',\n      isModelLoading: false,\n      isClassifying: false,\n      predictions: [],\n      photoSettingsOpen: true,\n      modelUpdateAvailable: false,\n      showModelUpdateAlert: false,\n      showModelUpdateSuccess: false,\n      isDownloadingModel: false\n    };\n  }\n\n  async componentDidMount() {\n    if (('indexedDB' in window)) {\n      try {\n        this.model = await tf.loadLayersModel('indexeddb://' + INDEXEDDB_KEY);\n\n        // Safe to assume tensorflowjs database and related object store exists.\n        // Get the date when the model was saved.\n        try {\n          const db = await openDB(INDEXEDDB_DB, 1, );\n          const item = await db.transaction(INDEXEDDB_STORE)\n                               .objectStore(INDEXEDDB_STORE)\n                               .get(INDEXEDDB_KEY);\n          const dateSaved = new Date(item.modelArtifactsInfo.dateSaved);\n          await this.getModelInfo();\n          console.log(this.modelLastUpdated);\n          if (!this.modelLastUpdated  || dateSaved >= new Date(this.modelLastUpdated).getTime()) {\n            console.log('Using saved model');\n          }\n          else {\n            this.setState({\n              modelUpdateAvailable: true,\n              showModelUpdateAlert: true,\n            });\n          }\n\n        }\n        catch (error) {\n          console.warn(error);\n          console.warn('Could not retrieve when model was saved.');\n        }\n\n      }\n      // If error here, assume that the object store doesn't exist and the model currently isn't\n      // saved in IndexedDB.\n      catch (error) {\n        console.log('Not found in IndexedDB. Loading and saving...');\n        console.log(error);\n        this.model = await tf.loadLayersModel(MODEL_PATH);\n        await this.model.save('indexeddb://' + INDEXEDDB_KEY);\n      }\n    }\n    // If no IndexedDB, then just download like normal.\n    else {\n      console.warn('IndexedDB not supported.');\n      this.model = await tf.loadLayersModel(MODEL_PATH);\n    }\n\n    this.setState({ modelLoaded: true });\n    this.initWebcam();\n\n    // Warm up model.\n    let prediction = tf.tidy(() => this.model.predict(tf.zeros([1, IMAGE_SIZE, IMAGE_SIZE, 3])));\n    prediction.dispose();\n  }\n\n  async componentWillUnmount() {\n    if (this.webcam) {\n      this.webcam.stop();\n    }\n\n    // Attempt to dispose of the model.\n    try {\n      this.model.dispose();\n    }\n    catch (e) {\n      // Assume model is not loaded or already disposed.\n    }\n  }\n\n  initWebcam = async () => {\n    try {\n      this.webcam = await tf.data.webcam(\n        this.refs.webcam,\n        {resizeWidth: CANVAS_SIZE, resizeHeight: CANVAS_SIZE, facingMode: 'environment'}\n      );\n    }\n    catch (e) {\n      this.refs.noWebcam.style.display = 'block';\n    }\n  }\n\n  startWebcam = async () => {\n    if (this.webcam) {\n      this.webcam.start();\n    }\n  }\n\n  stopWebcam = async () => {\n    if (this.webcam) {\n      this.webcam.stop();\n    }\n  }\n\n  getModelInfo = async () => {\n    await fetch(`${config.API_ENDPOINT}/model_info`, {\n      method: 'GET',\n    })\n    .then(async (response) => {\n      await response.json().then((data) => {\n        this.modelLastUpdated = data.last_updated;\n      })\n      .catch((err) => {\n        console.log('Unable to get parse model info.');\n      });\n    })\n    .catch((err) => {\n      console.log('Unable to get model info');\n    });\n  }\n\n  updateModel = async () => {\n    // Get the latest model from the server and refresh the one saved in IndexedDB.\n    console.log('Updating the model: ' + INDEXEDDB_KEY);\n    this.setState({ isDownloadingModel: true });\n    this.model = await tf.loadLayersModel(MODEL_PATH);\n    await this.model.save('indexeddb://' + INDEXEDDB_KEY);\n    this.setState({\n      isDownloadingModel: false,\n      modelUpdateAvailable: false,\n      showModelUpdateAlert: false,\n      showModelUpdateSuccess: true\n    });\n  }\n\n  classifyLocalImage = async () => {\n    this.setState({ isClassifying: true });\n\n    const croppedCanvas = this.refs.cropper.getCroppedCanvas();\n    const image = tf.tidy( () => tf.browser.fromPixels(croppedCanvas).toFloat());\n\n    // Process and resize image before passing in to model.\n    const imageData = await this.processImage(image);\n    const resizedImage = tf.image.resizeBilinear(imageData, [IMAGE_SIZE, IMAGE_SIZE]);\n\n    const logits = this.model.predict(resizedImage);\n    const probabilities = await logits.data();\n    const preds = await this.getTopKClasses(probabilities, TOPK_PREDICTIONS);\n\n    this.setState({\n      predictions: preds,\n      isClassifying: false,\n      photoSettingsOpen: !this.state.photoSettingsOpen\n    });\n\n    // Draw thumbnail to UI.\n    const context = this.refs.canvas.getContext('2d');\n    const ratioX = CANVAS_SIZE / croppedCanvas.width;\n    const ratioY = CANVAS_SIZE / croppedCanvas.height;\n    const ratio = Math.min(ratioX, ratioY);\n    context.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n    context.drawImage(croppedCanvas, 0, 0,\n                      croppedCanvas.width * ratio, croppedCanvas.height * ratio);\n\n    // Dispose of tensors we are finished with.\n    image.dispose();\n    imageData.dispose();\n    resizedImage.dispose();\n    logits.dispose();\n  }\n\n  classifyWebcamImage = async () => {\n    this.setState({ isClassifying: true });\n\n    const imageCapture = await this.webcam.capture();\n\n    const resized = tf.image.resizeBilinear(imageCapture, [IMAGE_SIZE, IMAGE_SIZE]);\n    const imageData = await this.processImage(resized);\n    const logits = this.model.predict(imageData);\n    const probabilities = await logits.data();\n    const preds = await this.getTopKClasses(probabilities, TOPK_PREDICTIONS);\n\n    this.setState({\n      predictions: preds,\n      isClassifying: false,\n      photoSettingsOpen: !this.state.photoSettingsOpen\n    });\n\n    // Draw thumbnail to UI.\n    const tensorData = tf.tidy(() => imageCapture.toFloat().div(255));\n    await tf.browser.toPixels(tensorData, this.refs.canvas);\n\n    // Dispose of tensors we are finished with.\n    resized.dispose();\n    imageCapture.dispose();\n    imageData.dispose();\n    logits.dispose();\n    tensorData.dispose();\n  }\n\n  processImage = async (image) => {\n    return tf.tidy(() => image.expandDims(0).toFloat().div(127).sub(1));\n  }\n\n  /**\n   * Computes the probabilities of the topK classes given logits by computing\n   * softmax to get probabilities and then sorting the probabilities.\n   * @param logits Tensor representing the logits from MobileNet.\n   * @param topK The number of top predictions to show.\n   */\n  getTopKClasses = async (values, topK) => {\n    const valuesAndIndices = [];\n    for (let i = 0; i < values.length; i++) {\n      valuesAndIndices.push({value: values[i], index: i});\n    }\n    valuesAndIndices.sort((a, b) => {\n      return b.value - a.value;\n    });\n    const topkValues = new Float32Array(topK);\n    const topkIndices = new Int32Array(topK);\n    for (let i = 0; i < topK; i++) {\n      topkValues[i] = valuesAndIndices[i].value;\n      topkIndices[i] = valuesAndIndices[i].index;\n    }\n\n    const topClassesAndProbs = [];\n    for (let i = 0; i < topkIndices.length; i++) {\n      topClassesAndProbs.push({\n        className: MODEL_CLASSES[topkIndices[i]],\n        probability: (topkValues[i] * 100).toFixed(2)\n      });\n    }\n    return topClassesAndProbs;\n  }\n\n  handlePanelClick = event => {\n    this.setState({ photoSettingsOpen: !this.state.photoSettingsOpen });\n  }\n\n  handleFileChange = event => {\n    if (event.target.files && event.target.files.length > 0) {\n      this.setState({\n        file: URL.createObjectURL(event.target.files[0]),\n        filename: event.target.files[0].name\n      });\n    }\n  }\n\n  handleTabSelect = activeKey => {\n    switch(activeKey) {\n      case 'camera':\n        this.startWebcam();\n        break;\n      case 'localfile':\n        this.setState({filename: null, file: null});\n        this.stopWebcam();\n        break;\n      default:\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Classify container\">\n\n      { !this.state.modelLoaded &&\n        <Fragment>\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n          {' '}<span className=\"loading-model-text\">Loading Model</span>\n        </Fragment>\n      }\n\n      { this.state.modelLoaded &&\n        <Fragment>\n        <Button\n          onClick={this.handlePanelClick}\n          className=\"classify-panel-header\"\n          aria-controls=\"photo-selection-pane\"\n          aria-expanded={this.state.photoSettingsOpen}\n          >\n          Take or Select a Photo to Classify\n            <span className='panel-arrow'>\n            { this.state.photoSettingsOpen\n              ? <FaChevronDown />\n              : <FaChevronRight />\n            }\n            </span>\n          </Button>\n          <Collapse in={this.state.photoSettingsOpen}>\n            <div id=\"photo-selection-pane\">\n            { this.state.modelUpdateAvailable && this.state.showModelUpdateAlert &&\n                <Container>\n                  <Alert\n                    variant=\"info\"\n                    show={this.state.modelUpdateAvailable && this.state.showModelUpdateAlert}\n                    onClose={() => this.setState({ showModelUpdateAlert: false})}\n                    dismissible>\n                      An update for the <strong>{this.state.modelType}</strong> model is available.\n                      <div className=\"d-flex justify-content-center pt-1\">\n                        {!this.state.isDownloadingModel &&\n                          <Button onClick={this.updateModel}\n                                  variant=\"outline-info\">\n                            Update\n                          </Button>\n                        }\n                        {this.state.isDownloadingModel &&\n                          <div>\n                            <Spinner animation=\"border\" role=\"status\" size=\"sm\">\n                              <span className=\"sr-only\">Downloading...</span>\n                            </Spinner>\n                            {' '}<strong>Downloading...</strong>\n                          </div>\n                        }\n                      </div>\n                  </Alert>\n                </Container>\n              }\n              {this.state.showModelUpdateSuccess &&\n                <Container>\n                  <Alert variant=\"success\"\n                         onClose={() => this.setState({ showModelUpdateSuccess: false})}\n                         dismissible>\n                    The <strong>{this.state.modelType}</strong> model has been updated!\n                  </Alert>\n                </Container>\n              }\n            <Tabs defaultActiveKey=\"camera\" id=\"input-options\" onSelect={this.handleTabSelect}\n                  className=\"justify-content-center\">\n              <Tab eventKey=\"camera\" title=\"Take Photo\">\n                <div id=\"no-webcam\" ref=\"noWebcam\">\n                  <span className=\"camera-icon\"><FaCamera /></span>\n                  No camera found. <br />\n                  Please use a device with a camera, or upload an image instead.\n                </div>\n                <div className=\"webcam-box-outer\">\n                  <div className=\"webcam-box-inner\">\n                    <video ref=\"webcam\" autoPlay playsInline muted id=\"webcam\"\n                           width=\"448\" height=\"448\">\n                    </video>\n                  </div>\n                </div>\n                <div className=\"button-container\">\n                  <LoadButton\n                    variant=\"primary\"\n                    size=\"lg\"\n                    onClick={this.classifyWebcamImage}\n                    isLoading={this.state.isClassifying}\n                    text=\"Classify\"\n                    loadingText=\"Classifying...\"\n                  />\n                </div>\n              </Tab>\n              <Tab eventKey=\"localfile\" title=\"Select Local File\">\n                <Form.Group controlId=\"file\">\n                  <Form.Label>Select Image File</Form.Label><br />\n                  <Form.Label className=\"imagelabel\">\n                    {this.state.filename ? this.state.filename : 'Browse...'}\n                  </Form.Label>\n                  <Form.Control\n                    onChange={this.handleFileChange}\n                    type=\"file\"\n                    accept=\"image/*\"\n                    className=\"imagefile\" />\n                </Form.Group>\n                { this.state.file &&\n                  <Fragment>\n                    <div id=\"local-image\">\n                      <Cropper\n                        ref=\"cropper\"\n                        src={this.state.file}\n                        style={{height: 400, width: '100%'}}\n                        guides={true}\n                        aspectRatio={1 / 1}\n                        viewMode={2}\n                      />\n                    </div>\n                    <div className=\"button-container\">\n                      <LoadButton\n                        variant=\"primary\"\n                        size=\"lg\"\n                        disabled={!this.state.filename}\n                        onClick={this.classifyLocalImage}\n                        isLoading={this.state.isClassifying}\n                        text=\"Classify\"\n                        loadingText=\"Classifying...\"\n                      />\n                    </div>\n                  </Fragment>\n                }\n              </Tab>\n            </Tabs>\n            </div>\n          </Collapse>\n          { this.state.predictions.length > 0 &&\n            <div className=\"classification-results\">\n              <h3>Predictions</h3>\n              <canvas ref=\"canvas\" width={CANVAS_SIZE} height={CANVAS_SIZE} />\n              <br />\n              <ListGroup>\n              {this.state.predictions.map((category) => {\n                  return (\n                    <ListGroup.Item key={category.className}>\n                      <strong>{category.className}</strong> {category.probability}%</ListGroup.Item>\n                  );\n              })}\n              </ListGroup>\n            </div>\n          }\n          </Fragment>\n        }\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}